###############################################################################
# Variables globales
###############################################################################
variables:
  GIT_STRATEGY: clone
  GIT_SSL_NO_VERIFY: "true"
  GIT_SUBMODULE_STRATEGY: recursive

  HTTP_PROXY: 'http://proxygeadm.etat-ge.ch:3128'
  HTTPS_PROXY: 'http://proxygeadm.etat-ge.ch:3128'
  NO_PROXY: 'localhost,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,10.145.38.211,.ceti.etat-ge.ch,registry.devops.etat-ge.ch'

  YARN_REGISTRY: 'https://registry.devops.etat-ge.ch/ctinexus/repository/npmjs/'
  NPM_REGISTRY: 'https://registry.devops.etat-ge.ch/ctinexus/repository/npmjs/'

  GIT_REPOSITORY: DEVELOPPEUR-EDG/ui
  OCI_SNAPSHOT_URL: 'oci-snapshot.devops.etat-ge.ch'
  OCI_RELEASE_URL: 'oci-release.devops.etat-ge.ch'
  BUILDAH: ${DOCKER_URL}/buildah/stable:v1.32.0
  GITLAB_PATH: git.devops.etat-ge.ch/gitlab

  IMAGE_NAME: "ch/ge/common/web/ge-theme"

default:
  image:
    name: docker-all.devops.etat-ge.ch/ch/ge/cti/build/alpine-maven-git-node:22
  tags:
    - 'for:container-image'
    - 'host:privileged-container'
    - 'net:gold-dev'

###############################################################################
# Workflow: décide quel pipeline est lancé suivant les push sur develop/main
###############################################################################
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      variables: { PIPELINE_TYPE: "release" }
    - if: $CI_COMMIT_BRANCH == "develop"
      variables: { PIPELINE_TYPE: "snapshot" }
    - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "trigger"'
      variables: { PIPELINE_TYPE: "snapshot" }
    - when: never

###############################################################################
# Scripts communs
###############################################################################
.before-yarn: &before-yarn |
  set -eo pipefail
  git config --global user.email    "${RUNNER_EMAIL}"
  git config --global user.name     "${RUNNER_USERNAME}"
  yarn config set strict-ssl false
  yarn config set yarn-registry  "${YARN_REGISTRY}"
  yarn config set version-git-message "[skip ci] v%s"
  mkdir -p .yarn
  yarn config set cache-folder .yarn
  yarn install --frozen-lockfile --network-timeout 600000
  yarn browserslist --update-db

###############################################################################
# STAGES
###############################################################################
stages:
  - .pre
  - build
  - push

debug-vars:
  stage: .pre
  script:
    - echo "CI_PIPELINE_SOURCE= $CI_PIPELINE_SOURCE"
    - echo "CI_COMMIT_BRANCH= $CI_COMMIT_BRANCH"
    - echo "CI_COMMIT_TAG= $CI_COMMIT_TAG"
    - echo "PIPELINE_TYPE (from workflow)= $PIPELINE_TYPE"
  rules:
    - when: always

###############################################################################
# SNAPSHOT  (branche develop ou trigger manuel)
###############################################################################
snapshot-build:
  stage: build
  rules:
    - if: '$PIPELINE_TYPE == "snapshot"'
  before_script:
    - *before-yarn
  script:
    - set -eo pipefail
    - CI= yarn build
    - yarn version --no-git-tag-version --prerelease --preid "SNAPSHOT"
    - git add package.json yarn.lock
    - PACKAGE_VERSION=`node -e "console.log(require('./package.json').version);"`
    - git commit -m "[skip ci] snapshot ${PACKAGE_VERSION}"
    - git push https://${SCM_USER}:${SCM_PASSWORD}@${GITLAB_PATH}/${GIT_REPOSITORY}/${CI_PROJECT_NAME}.git/ HEAD:${CI_COMMIT_BRANCH}
    - echo "${PACKAGE_VERSION}" > version.txt
  artifacts:
    paths: [ packages/website/dist, version.txt ]
    expire_in: 24h

snapshot-push-image:
  stage: push
  image: ${BUILDAH}
  needs: [ snapshot-build ]
  rules:
    - if: '$PIPELINE_TYPE == "snapshot"'
  before_script:
    - set -eo pipefail
    - buildah version
    - buildah login --username "${NEXUS_REPO_USER}" --password "${NEXUS_REPO_PASS}" "${OCI_SNAPSHOT_URL}"
  script:
    - set -eo pipefail
    - PACKAGE_VERSION=$(cat version.txt)
    - buildah bud -f Dockerfile --format docker -t "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:${IMAGE_VERSION}" -t "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:${CI_COMMIT_BRANCH}" .
    - buildah push "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:${PACKAGE_VERSION}"
    - buildah push "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:${CI_COMMIT_BRANCH}"
  after_script:
    - buildah logout "${OCI_SNAPSHOT_URL}" || true

###############################################################################
# RELEASE  (branche main)
###############################################################################
release-build:
  stage: build
  rules:
    - if: '$PIPELINE_TYPE == "release"'
  before_script:
    - *before-yarn
  script:
    - set -eo pipefail
    - yarn version --patch --no-git-tag-version
    - PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version);")
    - git add package.json yarn.lock
    - git commit -m "[skip ci] release ${RELEASE_VERSION}"
    - git tag "v${PACKAGE_VERSION}"
    - git push https://${SCM_USER}:${SCM_PASSWORD}@${GITLAB_PATH}/${GIT_REPOSITORY}/${CI_PROJECT_NAME}.git/ HEAD:main  --tags
    - CI= yarn build
    - echo "Version du build de release= ${PACKAGE_VERSION}"
    - echo "${PACKAGE_VERSION}" > version.txt
  artifacts:
    paths: [ packages/website/dist, version.txt ]
    expire_in: 1w

release-push-image:
  stage: push
  image: ${BUILDAH}
  needs: [ release-build ]
  rules:
    - if: '$PIPELINE_TYPE == "release"'
  before_script:
    - set -eo pipefail
    - buildah version
    - buildah login --username "${NEXUS_REPO_USER}" --password "${NEXUS_REPO_PASS}" "${OCI_RELEASE_URL}"
  script:
    - set -eo pipefail
    - PACKAGE_VERSION=$(cat version.txt)
    - buildah bud -f Dockerfile --format docker -t "${OCI_RELEASE_URL}/${IMAGE_NAME}:${PACKAGE_VERSION}" -t "${OCI_RELEASE_URL}/${IMAGE_NAME}:latest" .
    - buildah push "${OCI_RELEASE_URL}/${IMAGE_NAME}:${PACKAGE_VERSION}"
    - buildah push "${OCI_RELEASE_URL}/${IMAGE_NAME}:latest"
  after_script:
    - buildah logout "${OCI_RELEASE_URL}" || true
