variables:
  GIT_STRATEGY: clone
  GIT_SSL_NO_VERIFY: "true"
  GIT_SUBMODULE_STRATEGY: recursive

  HTTP_PROXY: 'http://proxygeadm.etat-ge.ch:3128'
  HTTPS_PROXY: 'http://proxygeadm.etat-ge.ch:3128'
  NO_PROXY: 'localhost,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,10.145.38.211,.ceti.etat-ge.ch,registry.devops.etat-ge.ch'

  YARN_REGISTRY: 'https://registry.devops.etat-ge.ch/ctinexus/repository/npmjs/'
  NPM_REGISTRY: 'https://registry.devops.etat-ge.ch/ctinexus/repository/npmjs/'

  GIT_REPOSITORY: DEVELOPPEUR-EDG/ui
  OCI_SNAPSHOT_URL: 'oci-snapshot.devops.etat-ge.ch'
  OCI_RELEASE_URL: 'oci-release.devops.etat-ge.ch'
  BUILDAH: ${DOCKER_URL}/buildah/stable:v1.32.0
  GITLAB_PATH: git.devops.etat-ge.ch/gitlab

  IMAGE_NAME: "ch/ge/common/web/ge-theme"

default:
  image:
    name: docker-all.devops.etat-ge.ch/ch/ge/cti/build/alpine-maven-git-node:21
  tags:
    - 'for:container-image'
    - 'host:privileged-container'
    - 'net:gold-dev'

stages:
  - snapshot
  - snapshot-upload
  - release
  - release-upload

cache:
  untracked: false
  key: "$CI_PROJECT_ID"

snapshot:
  stage: snapshot
  before_script:
    - git config --global user.email "gitlab@etat.ge.ch"
    - git config --global user.name ${GITLAB_USER}
  script:
    - IMAGE_VERSION=`node -e "console.log(require('./package.json').version);"`
    - echo "Building version" $IMAGE_VERSION
    - echo $IMAGE_VERSION > version.txt
    - yarn config set "strict-ssl" false
    - yarn config set yarn-registry ${YARN_REGISTRY}
    - "[ ! -d .yarn ] && mkdir .yarn"
    - yarn config set cache-folder .yarn
    - yarn install --network-timeout 600000
    - yarn browserslist --update-db
    - CI= yarn build
    - yarn config set version-git-message "[skip ci] v%s"
    - yarn version --no-git-tag-version --prerelease --preid SNAPSHOT
    - git push https://${GITLAB_USER}:${GITLAB_PASSWORD}@${GITLAB_PATH}/${GIT_REPOSITORY}/${CI_PROJECT_NAME}.git/ HEAD:main  --tags
  artifacts:
    paths:
      - build
      - version.txt
    expire_in: 24h
  allow_failure: false

docker-upload-snapshot:
  stage: snapshot-upload
  image: ${BUILDAH}
  before_script:
    - buildah version
    - IMAGE_VERSION=`cat version.txt`
    - buildah login --username ${NEXUS_REPO_USER} --password ${NEXUS_REPO_PASS} "${OCI_SNAPSHOT_URL}"
  script:
    - buildah bud -f Dockerfile --format docker -t "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:${IMAGE_VERSION}" -t "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:latest" .
    - buildah push "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:${IMAGE_VERSION}"
    - buildah push "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:latest"
  after_script:
    - buildah logout "${OCI_SNAPSHOT_URL}"
  artifacts:
    paths:
      - version.txt
    expire_in: 24h
  dependencies:
    - snapshot

release:
  stage: release
  before_script:
    - git config --global user.email "gitlab@etat.ge.ch"
    - git config --global user.name ${GITLAB_USER}
    - git config pull.rebase true
  #    - cd enu-console-admin-front
  script:
    - git pull origin main
    - IMAGE_VERSION=`node -e "console.log(require('./package.json').version);"`
    - echo "Building version" $IMAGE_VERSION
    - echo $IMAGE_VERSION > version.txt
    - yarn config set "strict-ssl" false
    - yarn config set yarn-registry ${YARN_REGISTRY}
    - "[ ! -d .yarn ] && mkdir .yarn"
    - yarn config set cache-folder .yarn
    - yarn install --network-timeout 600000
    - yarn browserslist --update-db
    - CI= yarn build
    - yarn config set version-git-message "[skip ci] v%s"
    - yarn version --patch
    - git push https://${GITLAB_USER}:${GITLAB_PASSWORD}@${GITLAB_PATH}/${GIT_REPOSITORY}/${CI_PROJECT_NAME}.git/ HEAD:main  --tags
  artifacts:
    paths:
      - build
      - version.txt
    expire_in: 1h
  dependencies:
    - snapshot
  when: manual
  allow_failure: false

docker-upload-release:
  stage: release-upload
  image: ${BUILDAH}
  before_script:
    - buildah version
    - IMAGE_VERSION=`cat version.txt`
    - buildah login --username ${NEXUS_REPO_USER} --password ${NEXUS_REPO_PASS} "${OCI_RELEASE_URL}"
  script:
    - buildah bud -f Dockerfile --format docker -t "${OCI_RELEASE_URL}/${IMAGE_NAME}:${IMAGE_VERSION}" .
    - buildah push "${OCI_RELEASE_URL}/${IMAGE_NAME}:${IMAGE_VERSION}"
  after_script:
    - buildah logout "${OCI_RELEASE_URL}"
  artifacts:
    paths:
      - version.txt
    expire_in: 24h
  dependencies:
    - release
