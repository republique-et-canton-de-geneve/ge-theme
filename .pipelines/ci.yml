###############################################################################
# Variables
###############################################################################
variables:
  GIT_STRATEGY: clone
  GIT_SSL_NO_VERIFY: "true"
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_DEPTH: "0"                        # tags & merges need full history

  HTTP_PROXY:  'http://proxygeadm.etat-ge.ch:3128'
  HTTPS_PROXY: 'http://proxygeadm.etat-ge.ch:3128'
  NO_PROXY:    'localhost,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,10.145.38.211,.ceti.etat-ge.ch,registry.devops.etat-ge.ch'

  YARN_REGISTRY: 'https://registry.devops.etat-ge.ch/ctinexus/repository/npmjs/'
  NPM_REGISTRY:  'https://registry.devops.etat-ge.ch/ctinexus/repository/npmjs/'

  OCI_SNAPSHOT_URL: 'oci-snapshot.devops.etat-ge.ch'
  OCI_RELEASE_URL:  'oci-release.devops.etat-ge.ch'
  BUILDAH: ${DOCKER_URL}/buildah/stable:v1.32.0
  GITLAB_PATH: git.devops.etat-ge.ch/gitlab

  IMAGE_NAME: "ch/ge/common/web/ge-theme"

default:
  image:
    name: docker-all.devops.etat-ge.ch/ch/ge/cti/build/alpine-maven-git-node:22
  tags: [ 'for:container-image', 'host:privileged-container', 'net:gold-dev' ]

###############################################################################
# Workflow
###############################################################################
workflow:
  rules:
    # 0) Hard skip for CI-internal commits (no [skip ci] anywhere)
    - if: '$CI_COMMIT_MESSAGE =~ /ci:internal/'
      when: never

    # 1) MRs (feature -> develop or develop -> main): run "build" validation
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

    # 2) Pushes to main = release
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
      variables: { PIPELINE_TYPE: "release" }

    # 3) Pushes to develop = snapshot
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "develop"'
      variables: { PIPELINE_TYPE: "snapshot" }

    # 4) Manual / trigger / schedule allowed (defaults to snapshot path)
    - if: '$CI_PIPELINE_SOURCE =~ /^(web|schedule|trigger)$/'
      variables: { PIPELINE_TYPE: "snapshot" }

    - when: never

###############################################################################
# Shared scripts
###############################################################################
.before-yarn: &before-yarn |
  set -euo pipefail
  git config --global --add safe.directory "$CI_PROJECT_DIR"
  git config --global user.email    "${RUNNER_EMAIL}"
  git config --global user.name     "${RUNNER_USERNAME}"
  yarn config set strict-ssl false
  yarn config set registry "${YARN_REGISTRY}"
  # IMPORTANT: DO NOT USE [skip ci]; use ci:internal and workflow rule above
  yarn config set version-git-message "ci:internal version %s"
  mkdir -p .yarn
  yarn config set cache-folder .yarn
  yarn install --frozen-lockfile --network-timeout 600000
  yarn browserslist --update-db

.resource-lock: &resource-lock
  resource_group: "${CI_PROJECT_PATH}-versioning"

.before-git: &before-git |
  set -euo pipefail
  git config --global --add safe.directory "$CI_PROJECT_DIR"
  git config --global user.email    "${RUNNER_EMAIL}"
  git config --global user.name     "${RUNNER_USERNAME}"

###############################################################################
# STAGES (must align with root .gitlab-ci.yml)
# root defines: build, quality, push, post-release
###############################################################################

###############################################################################
# Validation for MRs (no publish)
###############################################################################
validate-build:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - *before-yarn
  script:
    - echo "Validating build for Merge Request…"
    - CI= yarn build
    - echo "✅ Validation successful."

###############################################################################
# SNAPSHOT (push to develop)
###############################################################################
snapshot-build:
  stage: build
  <<: *resource-lock
  rules:
    - if: '$PIPELINE_TYPE == "snapshot"'
  before_script:
    - *before-yarn
    - git fetch --tags origin
  script: |
    set -euo pipefail

    CURRENT_VERSION=$(node -p "require('./package.json').version")
    echo "Current version on develop: ${CURRENT_VERSION}"

    # If this commit is the post-release handoff, package.json already at X.Y.Z-SNAPSHOT.0.
    if echo "$CI_COMMIT_MESSAGE" | grep -qi 'ci:prepare-next-snapshot'; then
      echo "Detected post-release handoff. Skipping snapshot bump."
    else
      # Regular develop push: bump pre-release SNAPSHOT
      yarn version --no-git-tag-version --prerelease --preid SNAPSHOT
      git add package.json yarn.lock
      git commit -m "ci:internal snapshot bump"
      git push "https://${SCM_USER}:${SCM_PASSWORD}@${GITLAB_PATH}/${CI_PROJECT_PATH}.git" HEAD:develop
    fi

    export BUILD_VERSION=$(node -p "require('./package.json').version")
    echo "${BUILD_VERSION}" > version.txt
    echo "Building version: ${BUILD_VERSION}"
    CI= BUILD_VERSION=$BUILD_VERSION yarn build
  artifacts:
    paths: [ packages/website/dist, version.txt ]
    expire_in: 24h

snapshot-push-image:
  stage: push
  image: ${BUILDAH}
  needs:
    - job: snapshot-build
      artifacts: true
  <<: *resource-lock
  rules:
    - if: '$PIPELINE_TYPE == "snapshot"'
  before_script:
    - set -euo pipefail
    - buildah version
    - buildah login --username "${NEXUS_REPO_USER}" --password "${NEXUS_REPO_PASS}" "${OCI_SNAPSHOT_URL}"
  script: |
    set -euo pipefail
    IMAGE_VERSION=$(cat version.txt)
    echo "Pushing snapshot image: ${IMAGE_NAME}:${IMAGE_VERSION}"

    buildah bud -f Dockerfile --format docker \
      -t "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:${IMAGE_VERSION}" \
      -t "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:develop" .

    buildah push "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:${IMAGE_VERSION}"
    buildah push "${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:develop"
  after_script:
    - buildah logout "${OCI_SNAPSHOT_URL}" || true

snapshot-update-bom-dev:
  stage: push
  needs:
    - job: snapshot-push-image
    - job: snapshot-build
      artifacts: true
  rules:
    - if: '$PIPELINE_TYPE == "snapshot"'
  <<: *resource-lock
  before_script:
    - *before-git
  script: |
    set -euo pipefail
    IMAGE_VERSION=$(cat version.txt)
    echo "GE_THEME_IMAGE=${OCI_SNAPSHOT_URL}/${IMAGE_NAME}:${IMAGE_VERSION}" > bom-dev.env
    git add bom-dev.env
    git commit -m "ci:internal update bom-dev to ${IMAGE_VERSION}"
    git push "https://${SCM_USER}:${SCM_PASSWORD}@${GITLAB_PATH}/${CI_PROJECT_PATH}.git" HEAD:develop

###############################################################################
# RELEASE (push to main)
###############################################################################
release-build:
  stage: build
  <<: *resource-lock
  rules:
    - if: '$PIPELINE_TYPE == "release"'
  before_script:
    - *before-yarn
    - git fetch --tags origin
  script: |
    set -euo pipefail

    CURRENT_VERSION=$(node -p "require('./package.json').version")
    echo "Version on main before release: ${CURRENT_VERSION}"

    # Strip -SNAPSHOT.* if present to form the release version
    if echo "$CURRENT_VERSION" | grep -q "SNAPSHOT"; then
      RELEASE_VERSION=$(node -p "'${CURRENT_VERSION}'.replace(/-SNAPSHOT.*$/,'')")
      echo "Creating release version: ${RELEASE_VERSION}"
      yarn version --new-version "${RELEASE_VERSION}" --no-git-tag-version
    else
      RELEASE_VERSION="${CURRENT_VERSION}"
      echo "Already a release version: ${RELEASE_VERSION}"
    fi


    export BUILD_VERSION=$(node -p "require('./package.json').version")
    echo "${BUILD_VERSION}" > version.txt
    CI= yarn build

    git add package.json yarn.lock
    git commit -m "ci:internal finalize release ${BUILD_VERSION}" || true
    git tag "v${BUILD_VERSION}"
    git push "https://${SCM_USER}:${SCM_PASSWORD}@${GITLAB_PATH}/${CI_PROJECT_PATH}.git" HEAD:main --tags
  artifacts:
    paths: [ packages/website/dist, version.txt ]
    expire_in: 1w

release-push-image:
  stage: push
  image: ${BUILDAH}
  needs:
    - job: release-build
      artifacts: true
  <<: *resource-lock
  rules:
    - if: '$PIPELINE_TYPE == "release"'
  before_script:
    - set -euo pipefail
    - buildah version
    - buildah login --username "${NEXUS_REPO_USER}" --password "${NEXUS_REPO_PASS}" "${OCI_RELEASE_URL}"
  script: |
    set -euo pipefail
    IMAGE_VERSION=$(cat version.txt)
    echo "Pushing release image: ${OCI_RELEASE_URL}/${IMAGE_NAME}:${IMAGE_VERSION}"

    buildah bud -f Dockerfile --format docker \
      -t "${OCI_RELEASE_URL}/${IMAGE_NAME}:${IMAGE_VERSION}" \
      -t "${OCI_RELEASE_URL}/${IMAGE_NAME}:latest" .

    buildah push "${OCI_RELEASE_URL}/${IMAGE_NAME}:${IMAGE_VERSION}"
    buildah push "${OCI_RELEASE_URL}/${IMAGE_NAME}:latest"
  after_script:
    - buildah logout "${OCI_RELEASE_URL}" || true

release-update-bom:
  stage: push
  needs:
    - job: release-push-image
    - job: release-build
      artifacts: true
  rules:
    - if: '$PIPELINE_TYPE == "release"'
  <<: *resource-lock
  before_script:
    - *before-git
  script: |
    set -euo pipefail
    IMAGE_VERSION=$(cat version.txt)
    echo "GE_THEME_IMAGE=${OCI_RELEASE_URL}/${IMAGE_NAME}:${IMAGE_VERSION}" > bom.env
    git add bom.env
    git commit -m "ci:internal update bom to release ${IMAGE_VERSION}" || true
    git push "https://${SCM_USER}:${SCM_PASSWORD}@${GITLAB_PATH}/${CI_PROJECT_PATH}.git" HEAD:main

###############################################################################
# POST-RELEASE → prepare develop for the next cycle (SNAPSHOT.0)
###############################################################################
post-release-prepare-develop:
  stage: post-release
  needs: [ { job: release-build, artifacts: true } ]
  <<: *resource-lock
  rules:
    - if: '$PIPELINE_TYPE == "release"'
  before_script:
    - *before-yarn
  script: |
    set -euo pipefail
    RELEASED_VERSION=$(cat version.txt)
    echo "Preparing develop after release of ${RELEASED_VERSION}"

    git fetch origin develop main --tags
    git checkout -B develop origin/develop
    git reset --hard origin/develop
    git clean -xfd

    echo "Merging origin/main into develop (no auto-commit)"
    git merge --no-ff --no-commit -X theirs origin/main || true

    # Resolve possible yarn.lock conflict by regenerating
    if git status --porcelain | grep -qE '^\s*UU\s+yarn.lock'; then
      echo "Resolving yarn.lock conflict by regeneration"
      git add package.json
      yarn install --frozen-lockfile=false
      git add yarn.lock
    fi

    NEXT_DEV_VERSION=$(node -e "const s=require('semver'); console.log(s.inc('${RELEASED_VERSION}','patch') + '-SNAPSHOT.0')")

    echo "Setting develop to ${NEXT_DEV_VERSION}"
    yarn version --new-version "${NEXT_DEV_VERSION}" --no-git-tag-version

    # IMPORTANT: Do NOT mark as ci:internal here; we WANT the snapshot pipeline to run
    git add package.json yarn.lock
    git commit -m "ci:prepare-next-snapshot ${NEXT_DEV_VERSION} (merge release v${RELEASED_VERSION})"
    git push "https://${SCM_USER}:${SCM_PASSWORD}@${GITLAB_PATH}/${CI_PROJECT_PATH}.git" HEAD:develop
